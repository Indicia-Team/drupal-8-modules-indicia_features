<?php

use Drupal\Core\Link;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_user_login().
 */
function easy_login_user_login(UserInterface $account) {
  if (empty($account->field_last_name->value)) {
    \Drupal::messenger()->addMessage(t('Please set at least your last name on your @account. ' .
       'This will allow your user registration to be linked properly to the central database of records.',
        array('@account' => Link::fromTextAndUrl('user account', $account->toUrl('edit-form'))->toString())
    ));
    return;
  }
  elseif ($account->access->value !== 0 && !empty($account->field_indicia_user_id->value))
    // if not first login and we know our indicia user ID, then there is nothing more to do
    return;
  else {
    // If we've logged in before but don't have a warehouse user ID, then it
    // means Easy Login was installed since we last logged in. So there might
    // be existing records to move into our user account.
    $needToProcessExistingRecords = ($account->access->value !== 0) && empty($account->field_indicia_user_id->value);
    easy_login_synchronise_account_to_warehouse($account, $needToProcessExistingRecords);
    $response = easy_login_call_get_user_id($account);
    easy_login_handle_get_user_id_response($account, $response, TRUE);
  }
}

function easy_login_user_presave(EntityInterface $account) {
  if ($account->isActive() && $account->id() && empty($account->field_indicia_user_id->value)) {
    $response = easy_login_call_get_user_id($account);
    easy_login_handle_get_user_id_response($account, $response, FALSE);
  }
}

/**
 * Hide user preferences fields from registration form or if config incomplete.
 */
function easy_login_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_register_form' || !hostsite_get_config_value('iform', 'master_checklist_id', 0)) {
    unset($form['field_taxon_groups']);
  }
  if ($form_id === 'user_register_form' || !hostsite_get_config_value('iform', 'profile_location_type_id', 0)) {
    unset($form['field_location']);
  }
  $form['#attached']['library'][] = 'easy_login/user-form';
}

/**
 * Implements hook_user_insert. Synchronises user fields to matching custom attributes on the
 * Indicia warehouse, if the user is created as active.
 * @param array $account User account
 */
function easy_login_user_insert($account) {
  if ($account->status->value) {
    easy_login_synchronise_account_to_warehouse($account, false);
  }
}

/**
 * Implements hook_user_update. Synchronises user fields to matching custom attributes on the
 * Indicia warehouse.
 * @param array $account User account
 * @param $category
 */
function easy_login_user_update($account) {
  easy_login_synchronise_account_to_warehouse($account, false);
}

/**
 * Callback for the allowed options for the species groups preference.
 *
 * @return array
 *   Returns a list of groups used in the configured list.
 */
function easy_login_allowed_taxon_groups() {
  $checklistId = hostsite_get_config_value('iform', 'master_checklist_id', 0);
  if ($checklistId) {
    iform_load_helpers(['data_entry_helper']);
    $conn = iform_get_connection_details();
    $readAuth = data_entry_helper::get_read_auth($conn['website_id'], $conn['password']);
    // Load the list of taxon groups. If we have a master list setting for the site, use this to ensure we only pick up
    // groups that are in use on the site.
    $response = data_entry_helper::get_population_data([
      'report' => 'library/taxon_groups/taxon_groups_used_in_checklist',
      'extraParams' => $readAuth + array('taxon_list_id' => $checklistId),
    ]);
    $groups = [];
    foreach ($response as $group) {
      $groups[$group['id']]=$group['title'];
    }
    return $groups;
  }
  else {
    return [];
  }
}

/**
 * Callback for the allowed options for the locations preference.
 *
 * @return array
 *   Returns a list of locations of the configured type.
 */
function easy_login_allowed_locations() {
  $locationTypeId = hostsite_get_config_value('iform', 'profile_location_type_id', 0);
  if ($locationTypeId) {
    iform_load_helpers(['data_entry_helper']);
    $conn = iform_get_connection_details();
    $readAuth = data_entry_helper::get_read_auth($conn['website_id'], $conn['password']);
    $response = data_entry_helper::get_population_data(array(
      'table' => 'location',
      'extraParams' => $readAuth + [
        'orderby' => 'name',
        'sortdir' => 'ASC',
        'location_type_id' => $locationTypeId,
      ],
    ));
    $locations = [];
    foreach ($response as $location) {
      $locations[$location['id']] = $location['name'];
    }
    return $locations;
  }
  return [];
}

/**
 * Function to call the get_user_id service on the warehouse.
 *
 * @param object $account
 *   User account object
 * @param string $force
 *   Set to merge (to force a merge operation) or split (to force no merge).
 * @param array $users_to_merge
 *   If force is set to merge, but only some users must be merged, pass an
 *   array of the user IDs.
 *
 * @return string
 *   Response from call to get_user_id.
 */
function easy_login_call_get_user_id($account, $force = NULL, $users_to_merge = NULL, $fieldsToSyncByCaption = [], $needToProcessExistingRecords=false) {
  if (empty($account->field_last_name->value)) {
    \Drupal::messenger()->addMessage(t('Please set at least your last name on your @account. ' .
       'This will allow your user registration to be linked properly to the central database of records.',
        array('@account' => Link::fromTextAndUrl('user account', $account->toUrl('edit-form'))->toString())
    ));
    return;
  }
  iform_load_helpers(['data_entry_helper']);
  $url = data_entry_helper::$base_url.'index.php/services/user_identifier/get_user_id';
  $identifiers = array(array('type'=>'email','identifier'=>$account->getEmail()));
  $identifiers = urlencode(json_encode($identifiers));
  $config = \Drupal::config('iform.settings');
  $auth = data_entry_helper::get_read_write_auth($config->get('website_id'), $config->get('password'));
  $url .= '?nonce='.$auth['write_tokens']['nonce'].'&auth_token='.$auth['write_tokens']['auth_token'];
  $postargs = 'surname='.urlencode($account->field_last_name->value).'&identifiers='.$identifiers;
  if ($needToProcessExistingRecords)
    $url .= '&cms_user_id='.$account->uid->value;
  if (!empty($account->field_indicia_user_id->value))
    $postargs .= '&warehouse_user_id=' . $account->field_indicia_user_id->value;
  if (count($fieldsToSyncByCaption))
    $postargs .= '&attribute_values='.urlencode(json_encode($fieldsToSyncByCaption));
  if (!empty($account->field_first_name->value))
    $postargs .= '&first_name='.urlencode($account->field_first_name->value);
  if ($force && ($force==='merge' || $force==='split')) {
    $postargs .= '&force='.$force;
    // We are definitely doing something on the server, so can inform the user
    \Drupal::messenger()->addMessage(t('Your user information has been updated.'));
  }
  $postargs .= '&shares_to_prevent=';
  if (isset($account->field_record_privacy) && $account->field_record_privacy)
    $postargs .= 'reporting,peer_review,verification,data_flow,moderation';
  if ($users_to_merge)
    $postargs .= '&user_to_merge='.urlencode(json_encode($users_to_merge));
  $response = data_entry_helper::http_post($url, $postargs);
  return $response['output'];
}

/**
 * Handle the response from a call to get_user_id on the warehouse services.
 *
 * @param object $account
 *   User object to save to
 * @param string $response
 *   Response from call to get_user_id (should be a json string).
 * @param boolean $save
 *   Should the updated account be saved?
 */
function easy_login_handle_get_user_id_response($account, $response, $save) {
  $response = json_decode($response);
  if (isset($response->userId)) {
    $isEmpty = empty($account->field_indicia_user_id->value);
    if ($isEmpty || $account->field_indicia_user_id->value != $response->userId) {
      // @todo: no need for these messages during registration
      if ($isEmpty) {
        \Drupal::messenger()->addMessage(t('Your user account is now linked to the central records database.'));
      }
      else {
        \Drupal::messenger()->addMessage(t('Your user account link to the central records database has been updated.'));
      }
      $account->field_indicia_user_id->setValue($response->userId);
      if ($save)
        $account->save();
    }
  }
  elseif (isset($response->possibleMatches)) {
    $_SESSION['multiple_users_to_resolve'] = $response->possibleMatches;
    $_SESSION['uid_to_resolve'] = $account->id();
    hostsite_goto_page('easy_login/resolve_multiple_users');
  }
  elseif (isset($response->error)) {
    \Drupal::messenger()->addWarning($response->error);
  }
}

function easy_login_synchronise_account_to_warehouse($account, $needToProcessExistingRecords) {
  $existingUser = \Drupal\user\Entity\User::load($account->uid->value);
  $fieldsToSyncByCaption = [];
  $fieldsToSync = array();
  foreach ($account as $field => $def) {
    if (preg_match('/^field_indicia_/', $field) && $field !== 'field_indicia_user_id') {
      if (!empty($def->value)) {
        $value = $def->value;
      }
      else {
        $value = '';
      }
      // Fields that are available for synchronisation must be called
      // field_indicia_*. We also don't want to handle anything that has not
      // actually changed.
      $userField = $existingUser->$field->value;
      // Note: there used to be an if statement around this field to make sure it was previously empty or had changed before doing a sync.
      // This does not work in the situation where a user registers and is then activated, as the first sync should occur at activation
      // when actually a field might of been filled at registration and won't have changed.
      $fieldsToSync[$field] = $value;
    }
  }
  if (count($fieldsToSync)) {
    // Indicia requires fields to match on the caption, so we need to query
    // the captions and convert the array.
    $database = \Drupal::database();
    foreach ($fieldsToSync as $fieldName => $newValue) {
      $fieldsToSyncByCaption = build_fields_to_sync_by_caption_array($database, $account, $fieldName, $fieldsToSyncByCaption, $fieldsToSync);
    }
  }
  if ($account->uid->value === $existingUser->uid->value) {
    // If the user has not filled in preferences then prompt them. Allow for the fact that the site administrator might have
    // hidden these fields if they feel they are not relevant to the site.
    $requests = array();
    // $account->field_taxon_groups->value etc contains something if the field exist
    if (isset($account->field_location) && empty($account->field_location->value))
      $requests[] = t('the area you would most often like to record in');
    if (isset($account->field_taxon_groups) && empty($account->field_taxon_groups->value))
      $requests[] = t('the list of species groups you are particularly interested in');
    if (!empty($requests)) {
      global $base_url;
      \Drupal::messenger()->addMessage(t('Why not tell us '.implode(' '.t('and').' ', $requests).' to help us tailor the system to your needs? '.
          'You can fill this information in on your '.'<a href="'.$base_url.'/'.'user/'.$account->uid->value.'/edit'.'">user preferences</a>'.'.'
      ));
    }
  }
  easy_login_move_form_data_into_account($account);
  $response=easy_login_call_get_user_id($account, null, null, $fieldsToSyncByCaption, $needToProcessExistingRecords);
  easy_login_handle_get_user_id_response($account, $response,false);
}

function build_fields_to_sync_by_caption_array($database, $account, $fieldName, $fieldsToSyncByCaption, $fieldsToSync) {
  $query = $database->query("select ".$fieldName.'_value'." from ".'user__'.$fieldName."");
  $r = $query->fetchAll();
  $fieldConfig = $account->get($fieldName)->getFieldDefinition()->getConfig('the_bundle');
  $label = $fieldConfig->getLabel();
  // Create an array of values to sync using the caption as array key instead of the field name
  $fieldsToSyncByCaption[$label] = $fieldsToSync[$fieldName];
  return $fieldsToSyncByCaption;
}

/**
 * Overwrites the content of the account object with any updates from the posted form. Does not save to the db.
 * @param array $account User account
 */
function easy_login_move_form_data_into_account($account) {
  foreach ($account as $key=>$data) {
    if (substr($key, 0, 6)==='field_') {
      $account->$key=$data;
    }
  }
}