<?php

/**
 * @file
 * Drupal module for group/activity/project landing pages.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 *
 * Declare a template for the group home pages.
 */
function group_landing_pages_theme($existing, $type, $theme, $path) {
  $defaultVariables = [
    'group_id' => '',
    'group_title' => '',
    'group_type' => '',
    'joining_method' => '',
    'description' => '',
    'implicit_record_inclusion' => '',
    'admin' => '',
    'member' => '',
    'pending' => '',
    'container' => '',
    'contained_by_group_id' => '',
    'contained_by_group_title' => '',
    'contained_by_group_description' => '',
    'contained_by_group_logo_path' => '',
    'contained_by_group_implicit_record_inclusion' => '',
    'contained_by_group_admin' => '',
    'contained_by_group_member' => '',
    'can_view_blog' => '',
    'can_post_blog' => '',
    'discoverable' => '',
    'edit_alias' => '',
    'group_label' => '',
    'container_group_label' => '',
    'contained_group_label' => '',
    'species_details_alias' => '',
    'species_details_within_group_alias' => '',
    'warehouse_url' => '',
  ];
  return [
    'group_landing_page_tabs' => [
      'variables' => array_merge([
        'overview_tab_content' => '',
        'progress_tab_content' => '',
        'taxa_tab_content' => '',
      ], $defaultVariables),
    ],
    'group_landing_page_overview' => [
      'variables' => $defaultVariables,
    ],
    'group_landing_page_progress' => [
      'variables' => $defaultVariables,
    ],
    'group_landing_page_taxa' => [
      'variables' => $defaultVariables,
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provides suggestions for template names:
 * * group-landing-page-tabs--type-<type name>, e.g.
 *   group-landing-page-tabs--type-bioblitz.html.twig.
 * * group-landing-page-tabs--id-<id>, e.g.
 *   group-landing-page-tabs--id-123.html.twig.
 */
function group_landing_pages_theme_suggestions_group_landing_page_tabs(array $variables) {
  $suggestions = [];
  // Lowest priority (least specific) first.
  $suggestions[] = 'group_landing_page_tabs__type_' . preg_replace('/[^a-z]/', '-', strtolower($variables['group_type']));
  $suggestions[] = "group_landing_page_tabs__id_$variables[group_id]";
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provides suggestions for template names:
 * * group-landing-page-overview--type-<type name>, e.g.
 *   group-landing-page-overview--type-bioblitz.html.twig.
 * * group-landing-page-overview--id-<id>, e.g.
 *   group-landing-page-overview--id-123.html.twig.
 */
function group_landing_pages_theme_suggestions_group_landing_page_overview(array $variables) {
  $suggestions = [];
  // Lowest priority (least specific) first.
  $suggestions[] = 'group_landing_page_overview__type_' . preg_replace('/[^a-z]/', '-', strtolower($variables['group_type']));
  $suggestions[] = "group_landing_page_overview__id_$variables[group_id]";
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provides suggestions for template names:
 * * group-landing-page-progress--type-<type name>, e.g.
 *   group-landing-page-progress--type-bioblitz.html.twig.
 * * group-landing-page-progress--id-<id>, e.g.
 *   group-landing-page-progress--id-123.html.twig.
 */
function group_landing_pages_theme_suggestions_group_landing_page_progress(array $variables) {
  $suggestions = [];
  // Lowest priority (least specific) first.
  $suggestions[] = 'group_landing_page_progress__type_' . preg_replace('/[^a-z]/', '-', strtolower($variables['group_type']));
  $suggestions[] = "group_landing_page_overview__id_$variables[group_id]";
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Provides suggestions for template names:
 * * group-landing-page-taxa--type-<type name>, e.g.
 *   group-landing-page-taxa--type-bioblitz.html.twig.
 * * group-landing-page-taxa--id-<id>, e.g.
 *   group-landing-page-taxa--id-123.html.twig.
 */
function group_landing_pages_theme_suggestions_group_landing_page_taxa(array $variables) {
  $suggestions = [];
  // Lowest priority (least specific) first.
  $suggestions[] = 'group_landing_page_taxa__type_' . preg_replace('/[^a-z]/', '-', strtolower($variables['group_type']));
  $suggestions[] = "group_landing_page_taxa__id_$variables[group_id]";
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the blog post form to hide the group ID field as its value is autoset.
 */
function group_landing_pages_form_node_group_blog_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (!empty($form['field_group_id']['widget'][0]['value']['#default_value'])) {
    $form['field_group_id']['#type'] = 'hidden';
    $form['field_group_id']['#value'] = $form['field_group_id']['widget'][0]['value']['#default_value'];
  }
  // Check if Ajax request.
  if (\Drupal::request()->isXmlHttpRequest()) {
    $form['actions']['submit']['#ajax']['callback'] = 'group_landing_pages__submit_ajax_callback';
  }
}

/**
 * Custom Ajax callback for group blog form popup.
 *
 * Prevents a page redirect.
 */
function group_landing_pages__submit_ajax_callback(array &$form, FormStateInterface $form_state) {
  // If form is valid then close the dialog.
  if (!$form_state->hasAnyErrors()) {
    $response = new AjaxResponse();
    $response->addCommand(new CloseDialogCommand());
    return $response;
  }
  // Otherwise call the default #ajax callback.
  $form_object = $form_state->getFormObject();
  $response = $form_object->submitAjaxForm($form, $form_state);
  return $response;
}

/**
 * Implements hook_views_pre_render().
 *
 * Attaches library for styling the blog entries view.
 */
function group_landing_pages_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'group_blog_entries')) {
    $view->element['#attached']['library'][] = 'group_landing_pages/blog-entries-view';
  }
}

/**
 * Implements hook_node_access_records().
 *
 * Creates node access grants for a blog entry so that edit permission can be
 * given to the group admins as well as the author of the blog entry.
 */
function group_landing_pages_node_access_records($node) {
  if ($node->bundle() == 'group_blog') {
    $grants = [];
    // A grant so all users can view blogs.
    $grants[] = [
      'realm' => 'group_blog_view',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
    // A grant so users can edit their own blogs.
    $grants[] = [
      'realm' => 'group_blog_author',
      'gid' => $node->getOwnerId(),
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
    ];
    // A grant so group admins can edit blogs.
    $grants[] = [
      'realm' => 'group_admin',
      'gid' => $node->field_group_id->value,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
    ];
    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 *
 * Claims grants for a user to be able to edit their own blog entries plus
 * those for any group they are admin for.
 */
function group_landing_pages_node_grants($account, $op) {
  $grants = [];
  // All users can view blog entries.
  $grants['group_blog_view'] = [0];
  if (hostsite_get_user_field('indicia_user_id')) {
    iform_load_helpers(['helper_base']);
    $conn = iform_get_connection_details();
    $readAuth = helper_base::get_read_auth($conn['website_id'], $conn['password']);
    // Load the groups the user is admin of.
    $groups = helper_base::get_population_data([
      'table' => 'groups_user',
      'extraParams' => $readAuth + [
        'columns' => 'group_id',
        'user_id' => hostsite_get_user_field('indicia_user_id'),
        'administrator' => 't',
        'pending' => 'f',
      ],
    ]);
    // Group IDs user is admin for.
    $groupIds = [];
    foreach ($groups as $group) {
      $groupIds[] = $group['group_id'];
    }
    // Authors can edit.
    $grants['group_blog_author'] = [$account->id()];
    // Group admins can edit.
    $grants['group_admin'] = $groupIds;
  }
  return $grants;
}
