<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\recording_system_links\Utility\RecordingSystemLinkUtils;
use Drupal\recording_system_links\Utility\ObservationOrgUtils;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds buttons for linking to recording systems, or shows existing link info.
 *
 * */
function recording_system_links_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_form') {
    $formUserId = $form_state->getFormObject()->getEntity()->id();
    if ($formUserId === \Drupal::currentUser()->id() && \Drupal::currentUser()->hasPermission('connect recording system links')) {
      $form['recording_system_links'] = [
        '#type' => 'details',
        '#open' => TRUE,
        '#title' => t('Recording system links'),
      ];
      $links = RecordingSystemLinkUtils::getUsersSystemLinkList(TRUE);
      foreach ($links as $link) {
        // New link button with info.
        $form['recording_system_links'][$link->machine_name] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => $link->title,
          '#description' => $link->description,
        ];
        if ($link->rst_uid) {
          // Existing link.
          $form['recording_system_links'][$link->machine_name]['info'] = [
            '#type' => 'item',
            '#title' => t('Your account is linked to to %title.', ['%title' => $link->title]),
          ];
        }
        else {
          $form['recording_system_links'][$link->machine_name]['connect_recording_system'] = [
            '#type' => 'link',
            '#title' => t('Connect to %title', ['%title' => $link->title]),
            '#url' => Url::fromRoute('recording_system_links.connect', ['machineName' => $link->machine_name]),
            '#attributes' => [
              'class' => ['button'],
            ],
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_iform_after_submit().
 *
 * When records submitted, find any links to recording systems that fire on
 * hooks, then sychronise the records.
 */
function recording_system_links_iform_after_submit(array $submission, $op, $response, &$msg) {
  if ($response['outer_table'] === 'sample') {
    // Retrieve links for hooks.
    $links = RecordingSystemLinkUtils::getUsersSystemLinkList(FALSE, 'hook');
    if (count($links) === 0) {
      return;
    };
    $records = RecordingSystemLinkUtils::getRecordsForSample($response['outer_id']);
    if (count($records) === 0) {
      return;
    }
    $successfulSystemNames = [];
    $identifiers = [];
    $apiManager = \Drupal::service('plugin.manager.remote_recording_system_api');
    // Query to get systems the user is connected to
    foreach ($links as $link) {
      $api = $apiManager->createInstance($link->api_provider);
      foreach ($records as $record) {
        $api->addMappedValues($link, $record);
        $errors = $api->getValidationErrors($link, $record);
        if (count($errors)) {
          \Drupal::messenger()->addWarning(t('A record could not be posted to @title as it was considered invalid for that system.', ['@title' => $link->title]));
          \Drupal::messenger()->addWarning(implode(' ', $errors));
          continue;
        }
        $result = $api->submit($link, $record);
        if ($result['status'] === 'OK') {
          $successfulSystemNames[$link->title] = $link->title;
          $identifiers[$link->title] = $result['identifier'];
        }
        else {
          \Drupal::messenger()->addError(t('An error occurred when posting a record to @title.', ['@title' => $link->title]));
          \Drupal::messenger()->addError(implode(' ', $result['errors']));
        }
      }
    }
    // Show a message summarising the extra places the record has been sent to.
    if (count($successfulSystemNames) > 0) {
      $opString = ['C' => 'added to', 'U' => 'updated on', 'D' => 'removed from'][$op];
      $lastSystemName = array_pop($successfulSystemNames);
      $systemNameString = (count($successfulSystemNames) > 0 ? implode(', ', $successfulSystemNames) . ' ' . t('and') . ' ' : '') . $lastSystemName;
      $entity = count($records) === 1 ? 'record' : 'sample';
      $msg .= ' ' . t('The @entity has also been @action @systems (see @links).', [
        '@entity' => $entity,
        '@action' => t($opString),
        '@systems' => $systemNameString,
        '@title' => $link->title,
        '@links' => implode(', ', $identifiers),
      ]);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * If cron sync enabled, then finds records since the last cron run for users
 * who have linked their accounts and syncs them.
 */
function recording_system_links_iform_cron() {
  $systemLinks = RecordingSystemLinkUtils::getAllSystemLinkList('cron');
  foreach ($systemLinks as $link) {
    // Tracking is in the $link data.
    // Fetch new/update records since tracking for user list
    //IndiciaUtils::fetchRecords($link->tracking, $link);
    // Sync the records to linked system
  }

}